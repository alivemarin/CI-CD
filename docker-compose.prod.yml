version: '3.8'
services:
  web:
    image: ${DOCKERHUB_USERNAME:-yourusername}/myflask:latest
    environment:
      - FLASK_ENV=production
    expose:
      - "5000"           # 외부 노출은 nginx가 담당
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    depends_on:
      - web
    ports:
      - "80:80"
      - "443:443" #443 포트 추가
    volumes:
      - ./nginx:/etc/nginx/conf.d:ro       # Nginx 설정 파일
      - ./certbot/conf:/etc/letsencrypt    # 인증서 파일
      - ./certbot/www:/var/www/certbot     # certbot 웹루트
    restart: unless-stopped
    command: "/bin/sh -c 'nginx -g \"daemon off;\" & while :; do sleep 6h; nginx -s reload; done'"


  certbot:  
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: /bin/sh -c # 쉘 스크립트를 실행하도록 명시적으로 설정
    command: | # <--- 여기에 주목! '|' (literal block) 스타일을 사용해야 쉘 스크립트가 정확하게 파싱됨
      # 이제 주기적인 갱신 루프 시작
      echo "--- Starting certificate renewal loop (renew) for hanhack.mjsec.kr ---"
      while :; do
        certbot renew --webroot -w /var/www/certbot # 갱신 시에도 --webroot 방식 사용
        # certbot renew 명령이 성공 (exit code 0) 했을 경우
        if [ $? -eq 0 ]; then
          echo "--- Certbot renewal check completed. If certificate was renewed, reloading Nginx ---"
          # Nginx 컨테이너에게 reload 시그널을 명시적으로 보내는 것이 좋음
          # docker exec {프로젝트명-nginx서비스명}-1 nginx -s reload 와 같은 명령을 컨테이너 밖에서 주기적으로 실행하거나
          # 또는 nginx 컨테이너의 command에서 주기적으로 reload를 하도록 설정했으니, 그 방식에 의존해도 됨
          # 여기서는 일단 별도로 reload 명령을 넣지 않음 (nginx command에 의존)
        else
          echo "--- Certbot renewal failed or encountered issues. Check logs for details. ---"
        fi
        sleep 12h # 12시간 (43200초) 대기 후 다시 시도
      done;
    restart: unless-stopped # 컨테이너가 죽으면 자동으로 재시작되도록 함 (필수!)
